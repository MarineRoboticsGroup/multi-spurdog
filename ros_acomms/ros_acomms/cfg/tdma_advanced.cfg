#! /usr/bin/env python
import roslib
from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, int_t, bool_t, str_t

PACKAGE = 'ros_acomms'

roslib.load_manifest(PACKAGE)

gen = ParameterGenerator()

# Name, Type, Level, Description, Default, Min, Max
gen.add("skew_cycle_sec", int_t, 0, "Skew cycle_start_time +/- offset in seconds", 0, -3600, 3600) # +1 hour, -1 hour
gen.add("software_mute", bool_t, 0, "Software mute, when muted, tdma won't transmit", False)   # when muted, tdma won't transmit

gen.add("num_slots", int_t, 0, "num_slots", 4, 1, 1000)  # num_slots max 1000 (arbitrary)
gen.add("slot_duration_seconds", int_t, 0, "slot_duration_seconds", 30, 0, 28800)  # slot_duration_seconds max 8 hrs (arbitrary)
gen.add("guard_time_seconds", int_t, 0, "guard_time_seconds", 5, 0, 28800)  # guard_time_seconds max 8 hrs (arbitrary)
gen.add("packet_length_seconds", int_t, 0, "packet_length_seconds", 5, 0, 28800)  # packet_length_seconds max 8 hrs (arbitrary)

gen.add("ping_modem", bool_t, 0, "Ping modem toggle", False) # Ping Modem toggle 
gen.add("ping_modem_timeout_sec", int_t, 0, "Modem src id that will be used in TWTT ping", 5, 5, 500)  # timeout for waiting for reply to ping (this is blocking on TDMA!)
gen.add("ping_modem_src", int_t, 0, "Modem src id that will be used in TWTT ping", 12, 0, 255)  # $CCCMD,PNG,SRC,ping_modem_src,...
gen.add("pings_per_slot", int_t, 0, "Number of TWTT pings to send to EACH ping_modem_src in ping_modem_srcs *no handling for taking up whole slot*", 0, 0, 15) # defaults to 0, if software_mute = True, no pings
                                                                                                # how many times to send, $CCCMD,PNG,SRC,ping_modem_src,...
cdr_enum = gen.enum([ gen.const("UNIX_EPOCH", int_t, 4, "Epoch TOT of ping reply"),
			          gen.const("MS_PAST_HR", int_t, 8, "ms past the hour TOT of ping reply")],
			          "Ping CDR")
gen.add("ping_cdr", int_t, 0, "TWTT ping CDR, only options are 04 epoch, 08 ms past the hour", 4, 4, 8, edit_method=cdr_enum)

gen.add("ping_transponders", bool_t, 0, "Ping REMUS transponder group", False) # Ping REMUS transponder group toggled on
gen.add("ping_transponder_a", bool_t, 0, "Ping REMUS transponder A", True) # Ping REMUS transponder A, only happens when ping_transponders == True
gen.add("ping_transponder_b", bool_t, 0, "Ping REMUS transponder B", True) # Ping REMUS transponder B
gen.add("ping_transponder_c", bool_t, 0, "Ping REMUS transponder C", True) # Ping REMUS transponder C
gen.add("ping_transponder_d", bool_t, 0, "Ping REMUS transponder D", True) # Ping REMUS transponder D

rate_enum = gen.enum([ gen.const("RELIABLE_RATE", int_t, 1, "Slower, most reliable"),
			           gen.const("FASTER_RATE", int_t, 3, "Faster, less reliable"),
			           gen.const("FASTEST_RATE", int_t, 5, "Fastest, least reliable")],
			           "PSK-FDP rates")

gen.add("miniframe_rate", int_t, 0, "miniframe_rate", 1, 0, 5, edit_method=rate_enum)
gen.add("dataframe_rate", int_t, 0, "dataframe_rate", 1, 0, 5, edit_method=rate_enum)

# The second parameter is the name of a node this could run in (used to generate documentation only),
# the third parameter is a name prefix the generated files will get (e.g. "<name>Config.h" for c++, or "<name>Config.py"
# for python.
exit(gen.generate(PACKAGE, "tdma_advanced", "tdma_advanced"))
