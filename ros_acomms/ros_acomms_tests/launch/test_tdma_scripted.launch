<launch>
    <arg name="num_slots" default="4" doc="" />
    <arg name="slot_duration_seconds" default="30" doc="" />
    <arg name="num_slots_half" default="8" doc="" />
    <arg name="slot_duration_seconds_half" default="15" doc="" />
    <arg name="num_slots_double" default="2" doc="" />
    <arg name="slot_duration_seconds_double" default="60" doc="" />
    <arg name="tdma_type" default="tdma_scripted" doc="type of TDMA node to use: only supports tdma_scripted currently" />
    <arg name="test_cycling_rates" default="true" doc="When false, scripted test plan will be for modem_commands test" />

    <arg name="active_slots_modem0" default="0,2" doc="Staggered modem0 active slots" />
    <arg name="active_slots_modem2" default="0" doc="Staggered double time modem2 active slots" />
    <arg name="active_slots_modem3" default="1,3,5,7" doc="Staggered half time modem3 active slots" />

    <env name="ROSCONSOLE_FORMAT" value="[${severity}] [${time:%Y-%m-%dT%H:%M:%S}] [${node}]: ${message}"/>

    <param name="use_sim_time" value="true"/>

    <group ns="modem0">
        <param name="random_seed" value="4" />
        <node name="modem_sim_node" pkg="ros_acomms_modeling" type="modem_sim_node.py" output="screen" >
            <param name="center_frequency_hz" value="10000" type="int" />
            <param name="bandwidth_hz" value="5000" type="int" />
            <param name="SRC" value="0" type="int" />
        </node>

        <node name="tdma" pkg="ros_acomms" type="$(arg tdma_type)_node.py" output="screen" required="true" respawn="false">
            <param name="tdma_scripted_test_plan_file" value="$(dirname)/tdma_scripted_test_plan.yaml" if="$(arg test_cycling_rates)" />
            <param name="tdma_scripted_test_plan_file" value="$(dirname)/tdma_scripted_test_plan_modem_cmds.yaml" unless="$(arg test_cycling_rates)" />
            <param name="num_slots" value="$(arg num_slots)"/>
            <param name="slot_duration_seconds" value="$(arg slot_duration_seconds)" />
            <param name="active_slots" value="$(arg active_slots_modem0)"/>
            <param name="always_send_test_data" value="true"/>
            <param name="guard_time_seconds" value="4"/>
        </node>

        <node name="message_queue_node" pkg="ros_acomms" type="message_queue_node.py" output="screen" >
            <param name="packet_codec_file" value="$(find ros_acomms_tests)/launch/message_codec_config.yaml"/>
        </node>

        <node name="packet_dispatch" pkg="ros_acomms" type="packet_dispatch_node.py" output="screen" >
            <param name="packet_codec_file" value="$(find ros_acomms_tests)/launch/message_codec_config.yaml"/>
        </node>

        <node name="modem_location_sim" pkg="ros_acomms_modeling" type="modem_location_sim_node.py" />
    </group>

    <group ns="modem2">
        <param name="random_seed" value="4" />

        <node name="modem_sim_node" pkg="ros_acomms_modeling" type="modem_sim_node.py" output="screen" >
            <param name="center_frequency_hz" value="10000" type="int" />
            <param name="bandwidth_hz" value="5000" type="int" />
            <param name="SRC" value="2" type="int" />
        </node>

        <node name="tdma" pkg="ros_acomms" type="$(arg tdma_type)_node.py" output="screen" required="true" respawn="false">
            <param name="tdma_scripted_test_plan_file" value="$(dirname)/tdma_scripted_test_plan.yaml" if="$(arg test_cycling_rates)" />
            <param name="tdma_scripted_test_plan_file" value="$(dirname)/tdma_scripted_test_plan_modem_cmds.yaml" unless="$(arg test_cycling_rates)" />
            <param name="num_slots" value="$(arg num_slots_double)"/>
            <param name="slot_duration_seconds" value="$(arg slot_duration_seconds_double)" />
            <param name="active_slots" value="$(arg active_slots_modem2)"/>
            <param name="always_send_test_data" value="true"/>
            <param name="guard_time_seconds" value="4"/>
        </node>

        <node name="message_queue_node" pkg="ros_acomms" type="message_queue_node.py" output="screen" >
            <param name="packet_codec_file" value="$(find ros_acomms_tests)/launch/message_codec_config.yaml"/>
        </node>

        <node name="packet_dispatch" pkg="ros_acomms" type="packet_dispatch_node.py" output="screen" >
            <param name="packet_codec_file" value="$(find ros_acomms_tests)/launch/message_codec_config.yaml"/>
        </node>

        <node name="modem_location_sim" pkg="ros_acomms_modeling" type="modem_location_sim_node.py" />
    </group>

    <group ns="modem3">
        <param name="random_seed" value="4" />

        <node name="modem_sim_node" pkg="ros_acomms_modeling" type="modem_sim_node.py" output="screen" >
            <param name="center_frequency_hz" value="10000" type="int" />
            <param name="bandwidth_hz" value="5000" type="int" />
            <param name="SRC" value="3" type="int" />
        </node>

        <node name="tdma" pkg="ros_acomms" type="$(arg tdma_type)_node.py" output="screen" required="true" respawn="false">
            <param name="tdma_scripted_test_plan_file" value="$(dirname)/tdma_scripted_test_plan.yaml" if="$(arg test_cycling_rates)" />
            <param name="tdma_scripted_test_plan_file" value="$(dirname)/tdma_scripted_test_plan_modem_cmds.yaml" unless="$(arg test_cycling_rates)" />
            <param name="num_slots" value="$(arg num_slots_half)"/>
            <param name="slot_duration_seconds" value="$(arg slot_duration_seconds_half)" />
            <param name="active_slots" value="$(arg active_slots_modem3)"/>
            <param name="always_send_test_data" value="true"/>
        </node>

        <node name="message_queue_node" pkg="ros_acomms" type="message_queue_node.py" output="screen" >
            <param name="packet_codec_file" value="$(find ros_acomms_tests)/launch/message_codec_config.yaml"/>
        </node>

        <node name="packet_dispatch" pkg="ros_acomms" type="packet_dispatch_node.py" output="screen" >
            <param name="packet_codec_file" value="$(find ros_acomms_tests)/launch/message_codec_config.yaml"/>
        </node>

        <node name="modem_location_sim" pkg="ros_acomms_modeling" type="modem_location_sim_node.py" />
    </group>

    <param name="random_seed" value="4" />
    <node name="sim_packet_performance_node" pkg="ros_acomms_modeling" type="sim_packet_performance_node.py" />

    <node name="sim_transmission_loss_node" pkg="ros_acomms_modeling" type="sim_transmission_loss_node.py"  >
        <param name="water_depth" value="20" type="int" />
        <param name="bellhop_arrivals" value="false" type="bool" />
    </node>

    <node name="clock_generator" pkg="ros_acomms_modeling" type="clock_generator.py">
        <!-- <param name="multiplier" value="10" type="int" /> -->
    </node>

</launch>
